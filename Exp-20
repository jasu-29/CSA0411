#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex, wrt;
int read_count = 0;
int shared_data = 0;

void *reader(void *arg) {
    int id = *((int *)arg);

    sem_wait(&mutex);
    read_count++;
    if (read_count == 1)
        sem_wait(&wrt);  // first reader locks writers
    sem_post(&mutex);

    printf("Reader %d reads shared_data = %d\n", id, shared_data);
    sleep(1);

    sem_wait(&mutex);
    read_count--;
    if (read_count == 0)
        sem_post(&wrt);  // last reader unlocks writers
    sem_post(&mutex);

    return NULL;
}

void *writer(void *arg) {
    int id = *((int *)arg);

    sem_wait(&wrt); // exclusive access
    shared_data += 10;
    printf("Writer %d writes shared_data = %d\n", id, shared_data);
    sleep(1);
    sem_post(&wrt);

    return NULL;
}

int main() {
    pthread_t r1, r2, w1, w2;
    int id1 = 1, id2 = 2;

    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    pthread_create(&r1, NULL, reader, &id1);
    pthread_create(&w1, NULL, writer, &id1);
    pthread_create(&r2, NULL, reader, &id2);
    pthread_create(&w2, NULL, writer, &id2);

    pthread_join(r1, NULL);
    pthread_join(w1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w2, NULL);

    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}
