/* io_syscalls.c
   Demonstrate fcntl, lseek, stat, opendir, readdir
   Compile: gcc io_syscalls.c -o io_syscalls
   Run: ./io_syscalls [directory]
*/
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <errno.h>

int main(int argc, char *argv[]) {
    const char *file = "io_demo.txt";
    int fd = open(file, O_RDWR | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) { perror("open"); return 1; }
    write(fd, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\n", 37);

    // fcntl: get flags, set close-on-exec flag
    int flags = fcntl(fd, F_GETFD);
    if (flags == -1) perror("fcntl getfd");
    else {
        if (fcntl(fd, F_SETFD, flags | FD_CLOEXEC) == -1) perror("fcntl setfd");
        else printf("Set FD_CLOEXEC on %s\n", file);
    }

    // lseek: move and tell
    off_t pos = lseek(fd, 10, SEEK_SET);
    printf("lseek moved to %lld\n", (long long)pos);
    char buf[20];
    ssize_t r = read(fd, buf, 10);
    if (r>0) { buf[r]='\0'; printf("Read after lseek: %s\n", buf); }

    close(fd);

    // stat
    struct stat st;
    if (stat(file, &st) == 0) {
        printf("File %s size: %lld bytes\n", file, (long long)st.st_size);
    } else perror("stat");

    // opendir/readdir
    const char *dir = (argc>1)?argv[1]:".";
    DIR *d = opendir(dir);
    if (!d) { perror("opendir"); return 1; }
    printf("Entries in %s:\n", dir);
    struct dirent *de;
    while ((de = readdir(d)) != NULL) {
        printf(" %s\n", de->d_name);
    }
    closedir(d);

    unlink(file);
    return 0;
}
