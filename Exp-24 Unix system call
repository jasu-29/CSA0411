/* unix_file_syscalls.c
   Demonstrate open/read/write/close/unlink/mkdir/rmdir
   Compile: gcc unix_file_syscalls.c -o unix_file_syscalls
   Run: ./unix_file_syscalls
*/
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <string.h>
#include <errno.h>

int main() {
    const char *fname = "demo_file.txt";
    int fd = open(fname, O_RDWR | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) { perror("open"); return 1; }

    const char *text = "Hello from UNIX syscalls!\n";
    if (write(fd, text, strlen(text)) < 0) { perror("write"); close(fd); return 1; }

    lseek(fd, 0, SEEK_SET); // go back to start
    char buf[128]; ssize_t n = read(fd, buf, sizeof(buf)-1);
    if (n < 0) { perror("read"); close(fd); return 1; }
    buf[n] = '\0';
    printf("Read: %s", buf);

    close(fd);

    if (mkdir("demo_dir", 0755) < 0 && errno != EEXIST) { perror("mkdir"); }
    if (rmdir("demo_dir") < 0) { perror("rmdir"); }

    if (unlink(fname) < 0) { perror("unlink"); }

    return 0;
}
