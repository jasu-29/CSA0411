/* dining_philosophers.c */
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5
sem_t forks[N];
void *philosopher(void *arg){
    int id = *(int*)arg;
    while(1){
        printf("P%d thinking\n", id);
        sleep(1);
        // pick up forks (avoid deadlock: odd picks left then right, even picks right then left)
        if(id%2==0){ sem_wait(&forks[(id+1)%N]); sem_wait(&forks[id]); }
        else { sem_wait(&forks[id]); sem_wait(&forks[(id+1)%N]); }
        printf("P%d eating\n", id); sleep(1);
        sem_post(&forks[id]); sem_post(&forks[(id+1)%N]);
        break; // single eat then exit for demo
    }
    return NULL;
}

int main(){
    pthread_t th[N]; int ids[N];
    for(int i=0;i<N;i++) sem_init(&forks[i],0,1);
    for(int i=0;i<N;i++){ ids[i]=i; pthread_create(&th[i], NULL, philosopher, &ids[i]); }
    for(int i=0;i<N;i++) pthread_join(th[i], NULL);
    for(int i=0;i<N;i++) sem_destroy(&forks[i]);
    return 0;
}
