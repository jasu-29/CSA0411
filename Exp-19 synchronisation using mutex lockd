#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t lock;
int shared_data = 0;

void *process(void *arg) {
    int id = *((int *)arg);

    printf("Process %d waiting for lock...\n", id);
    pthread_mutex_lock(&lock);  // enter critical section

    printf("Process %d entered critical section.\n", id);
    shared_data++;
    printf("Shared Data updated by Process %d: %d\n", id, shared_data);
    sleep(1);

    printf("Process %d leaving critical section.\n", id);
    pthread_mutex_unlock(&lock); // exit critical section

    return NULL;
}

int main() {
    pthread_t t1, t2;
    int id1 = 1, id2 = 2;

    pthread_mutex_init(&lock, NULL);

    pthread_create(&t1, NULL, process, &id1);
    pthread_create(&t2, NULL, process, &id2);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    pthread_mutex_destroy(&lock);

    return 0;
}
